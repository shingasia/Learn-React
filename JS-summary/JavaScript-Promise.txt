1. Promise
- Promise 객체는 비동기 작업이 맞이할 미래의 완료 또는 실패와 그 결과 값을 나타낸다.
- Promise는 프로미스가 생성될 때 꼭 알 수 있지는 않은 값을 위한 대리자로, 비동기 연산이 종료된 이후의 결과값이나 실패 이유를 처리하기 위한 처리기를 연결할 수 있도록 합니다
- Promise를 사용하면 비동기 메서드에서 마치 동기 메서드처럼 값을 반환할 수 있다.

Promise는 다음 중 하나의 상태를 가진다
- 대기(pending)    : 이행하거나 거부되지 않은 초기 상태
- 이행됨(fullfilled) : 연산이 성공적으로 완료됨 (비동기 처리가 완료되어 프로미스가 결과 값을 반환해준 상태)
- 거부됨(rejected)   : 연산이 실패함 (비동기 처리가 실패하거나 오류가 발생한 상태)
처음에 Promise객체는 대기 상태이고, 값과 함께 이행할 수도, 어떤 오류로 인해 거부될 수도 있다.

▶ new Promise(executor) // Promise 객체의 생성자

- executor: resolve와 reject 인수를 전달할 실행 함수.
            실행 함수는 프로미스에 의해 resolve함수와 reject함수를 받아 즉시 실행됩니다.
            실행 함수는 어떤 비동기 작업을 시작한 후 모든 작업을 끝내면 resolve를 호출하고, 중간에 오류가 발생한 경우 reject함수를 호출한다.




new Promise( (resolve, reject) => {
   //   do something asynchronous which eventually calls either:
   //
   //   resolve(someValue)        // fulfilled
   //   or
   //   reject("failure reason")  // rejected
});


▶ then() <- Promise객체에 붙여서 사용한다  [ Promise.prototype.then() ]
then() 메서드는 Promise를 리턴하고, 두 개의 콜백 함수를 인수로 받는다. 하나는 Promise가 이행했을 때의 콜백 함수, 다른 하나는 거부했을 때를 위한 콜백 함수이다.

then() 의 반환값
함수가 값을 반환할 경우, then에서 반환한 프로미스는 그 반환값을 자신의 결과값으로 하여 이행합니다.
값을 반환하지 않을 경우, then에서 반환한 프로미스는 undefined를 결과값으로 하여 이행합니다.
오류가 발생할 경우, then에서 반환한 프로미스는 그 오류를 자신의 결과값으로 하여 거부합니다.
이미 이행한 프로미스를 반환할 경우, then에서 반환한 프로미스는 그 프로미스의 결과값을 자신의 결과값으로 하여 이행합니다.
이미 거부한 프로미스를 반환할 경우, then에서 반환한 프로미스는 그 프로미스의 결과값을 자신의 결과값으로 하여 거부합니다.

▶ catch() <- Promise객체에 붙여서 사용한다  [ Promise.prototype.catch() ]
catch() 메서드는 Promise를 리턴하고, "p.then(undefined, onRejected)" 와 동일하게 실행한다.
실제로 p.catch(onRejected)는 내부적으로 p.then(undefined, onRejected)를 호출한다. 이 말은 비록 결과값으로 undefined 값을 원해도
무조건 다음과 같이 onRejected 함수를 넘겨줘야 한다 p.catch(()=>{ })



▶ finally() <- Promise객체에 붙여서 사용한다.  [ Promise.prototype.finally() ]
finally() 메서드는 Promise를 리턴하고, Promise가 처리되면 충족되거나 거부되는지 여부에 관계없이 지정된 콜백 함수가 실행됩니다.
finally() 콜백은 어떠한 인수도 전달받지 않습니다, 왜냐하면 promise가 이행되었는지 또는 거부되었는지를 판단할 수 없기 때문입니다. 
Promise의 왜 거부되었는지 또는 이행되었을때 반환되는 값이 필요하지 않거나 제공할 필요가 없을 때 활용합니다.


const pr = new Promise((resolve, reject) => {
   setTimeout(() => {
      resolve('OK')
   }, 3000);
});

// CODE1
pr.then(
   function(result) { },
   function(err) { }
);

// CODE2
pr.then(
   function(result) { }
).catch(
   function(err) { }
);

▶▶▶ CODE1은 CODE2의 형태로 바꿀 수 있다.



















▶ Promise.all(iterable)
- iterable내의 모든 프로미스가 이행한 뒤 이행하고, 어떤 프로미스가 거부하면 즉시 거부하는 프로미스를 반환.
- 반환한 프로미스의 이행 결과값은 매개변수(프로미스가 아닌 값을 포함하여)로 주어진 순회 가능한 객체에 포함된 모든 값을 담은 배열입니다.
  (Promise.all은 여러 프로미스의 결과를 집계할 때 유용하게 사용할 수 있다.)
- 주어진 프로미스 중 하나라도 거부하면, 다른 프로미스의 이행 여부에 상관없이 첫 번째 거부 이유를 사용해 거부합니다.


Promise.resolve(2).then(() => {}, () => {}) (undefined로 해결될) 와 달리, 
Promise.resolve(2).finally(() => {}) 는 값 2로 해결됩니다.
유사하게 Promise.reject(3).then(() => {}, () => {}) (undefined로 거부될)와는 달리 
Promise.reject(3).finally(() => {}) 는 값 3로 거부됩니다.









