https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference
https://okky.kr/article/399271
https://www.javatpoint.com/javascript-data-types


전역 객체(표준 내장 객체)
==========값 속성==========
Infinity, NaN, undefined, null 리터럴

==========함수 속성==========
eval()
uneval()
isFinite()
isNaN()
parseFloat()
parseInt()
decodeURI()
decodeURIComponent()
encodeURI()
encodeURIComponent()
==========기초 객체==========
Object, Function ,Boolean ,Symbol ,Error ,EvalError ,InternalError ,RangeError
,ReferneceError ,SyntaxError, TypeError

==========숫자 및 날짜==========
Number, Math, Date

==========텍스트 처리==========
String, RegExp

==========인덱스 있는 컬렉션==========
Array

==========키 있는 컬렉션==========
Map, Set, WeakMap, WeakSet

==========산술 연산자==========
+, -, *, /, %, ++, --

==========논리 연산자==========
&&, ||, !

==========비교 연산자==========
==, ===(equal and of same type), !=, !==, >, >=, <, <=

==========비트 연산자==========
&, |, ^, ~, <<, >>, >>>

==========Special Operators==========
(?:), ,(Comma), delete, in, instanceof, new, typeof, void, yield

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
var 변수를 선언, 초기화 (함수 단위의 scope)
let 변수를 선언, 쵝화 (블록 단위의 scope)
const 읽기 전용 상수를 선언 (블록 단위의 scope)

if (true) {
  var x = 5;
}
console.log(x); // 5


if (true) {
  let y = 5;
}
console.log(y); // ReferenceError: y is not defined

var x = 1;
{
  var x = 2;
}
console.log(x); // outputs 2


var myFalse = new Boolean(false);   // initial value of false
var g = Boolean(myFalse);       // initial value of true
var myString = new String('Hello'); // string object
var s = Boolean(myString);      // initial value of true

거짓으로 취급하는 값
false
undefined
null
0
NaN
("") 빈 문자열


if (condition_1) {
  statement_1;
} else if (condition_2) {
  statement_2;
} else if (condition_n) {
  statement_n;
} else {
  statement_last;
}


switch (expression) {
  case label_1:
    statements_1
    [break;]
  case label_2:
    statements_2
    [break;]
    ...
  default:
    statements_def
    [break;]
}


예외를 사용할 때 throw 문을 사용합니다. 여러분이 예외를 사용할 때, 
사용되는 값을 포함하는 표현을 명시해야합니다
throw expression;


throw "Error2";   // String type
throw 42;         // Number type
throw true;       // Boolean type
throw {toString: function() { return "I'm an object!"; } };



// try-catch-finally
openMyFile();
try {
  writeMyFile(theData); //This may throw a error
} catch(e) {
  handleError(e); // If we got a error we handle it
} finally {
  closeMyFile(); // always close the resource
}


▶ 만약 finally 블록이 값을 반환하였을 경우, try 블록과 catch블록의 return 문장과 상관없이 전체 try-catch-finally 블록의 반환값이 됩니다
function f() {
  try {
    console.log(0);
    throw "bogus";
  } catch(e) {
    console.log(1);
    return true; // this return statement is suspended
                 // until finally block has completed
    console.log(2); // not reachable
  } finally {
    console.log(3);
    return false; // overwrites the previous "return"
    console.log(4); // not reachable
  }
  // "return false" is executed now
  console.log(5); // not reachable
}
f(); // alerts 0, 1, 3; returns false






//라벨을 이용한 중첩 반복문 continue 또는 break
checkiandj:
  while (i < 4) {
    console.log(i);
    i += 1;
    checkj:
      while (j > 4) {
        console.log(j);
        j -= 1;
        if ((j % 2) == 0) {
          continue checkj;
        }
        console.log(j + " is odd.");
      }
      console.log("i = " + i);
      console.log("j = " + j);
  }


var x, y;
loop1:         //The first for statement is labeled as "loop1."  

for (x = 1; x < 4; x++) {   
     loop2:    //The second for statement is labelled as "loop2"  
   for (y = 1; y < 4; y++) {    
      if (x === 2 && y === 2) {  
         break loop1;  
      }  
      console.log('x = ' + x + ', y = ' + y);  
   }  
} 




//for...in 문
for (variable in object) {
  statements
}

//for...of 문
for (variable of object) {
  statement
}
for...of 문은 각각의 고유한 특성의 값을 실행할 명령과 함께 사용자 지정 반복 후크를 호출하여, 
반복 가능한 객체(배열, Map, Set, 인수 객체 등을 포함)를 통해 반복하는 루프를 만듭니다.


let arr = [3, 5, 7];
arr.foo = "hello";

for (let i in arr) {
   console.log(i); // logs "0", "1", "2", "foo"
}

for (let i of arr) {
   console.log(i); // logs "3", "5", "7"
}


==================문자열==================
작은따옴표(''), 큰따옴표(""), 백틱(``)을 사용하여 간단한 문자열을 만들 수 있습니다
'foo'
"bar"
`hello ${expression}`


유니코드 이스케이프 시퀀스는 \u 다음에 적어도 네 개의 16진수 숫자(digit)를 필요로 합니다.
'\u00A9' // "©"

var s = new String("foo"); // Creates a String object
console.log(s); // Displays: { '0': 'f', '1': 'o', '2': 'o'}
typeof s; // Returns 'object'

String.length 속성으로 문자열의 길이를 알 수 있다.


▶▶▶▶▶▶▶ 문자열 객체의 메서드
charAt, charCodeAt
indexOf, lastIndexOf
startsWith, endsWith, includes
concat
split
slice, substring
replaceAll // ECMAScript12(ES12 이상 버전)
match, replace, search // 정규 표현식으로 작업한다
toLowerCase
toUpperCase



==================함수==================
var square = function(number) { return number * number };
var x = square(4) // x 의 값은 16 입니다.


var factorial = function fac(n) { return n<2 ? 1 : n*fac(n-1) };
console.log(factorial(3));



function addSquares(a,b) {
  function square(x) {
    return x * x;
  }
  return square(a) + square(b);
}
a = addSquares(2,3); // returns 13




function outside(x) {
  function inside(y) {
    return x + y;
  }
  return inside;
}
result1 = outside(3)(5); // returns 8



▶ 인수(arguments) 객체 사용하기
function myConcat(separator) {
   var result = ""; // 리스트를 초기화한다
   var i;
   // arguments를 이용하여 반복한다
   for (i = 1; i < arguments.length; i++) {
      result += arguments[i] + separator;
   }
   return result;
}


▶ 디폴트 매개변수
function multiply(a, b = 1) {
  return a*b;
}
multiply(5); // 5


▶ 나머지 매개변수
function myFun(a, b, ...manyMoreArgs) {
  console.log("a", a)
  console.log("b", b)
  console.log("manyMoreArgs", manyMoreArgs)
}

myFun("one", "two", "three", "four", "five", "six")

// Console Output:
// a, one
// b, two
// manyMoreArgs, [three, four, five, six]

▶ 화살표 함수(arrow function)
화살표 함수는 this, arguments, super를 가질 수 없고, new를 사용할 수 없다
화살표 함수에서는 this가 바인딩되지 않았기 때문에, call() 또는 apply() 메서드는 인자만 전달 할 수 있다. this는 무시된다.

params => ({foo: bar}) //객체 리터럴을 반환할 때 괄호로 묶는다

// 나머지 매개변수 및 기본 매개변수를 지원함
(param1, param2, ...rest) => { statements }
(param1 = defaultValue1, param2, …, paramN = defaultValueN) => { statements }



============================ 구조 분해 할당 ============================
var foo = ["one", "two", "three"];

// without destructuring
var one   = foo[0];
var two   = foo[1];
var three = foo[2];

// 배열의 구조 분해 할당
let a, b, rest;
[a, b, ...rest]=[10, 20, 30, 40, 50];

let data = [ "crong", "honux", "jk", "jinny"];
let [jisu, , jung]=data; // jisu="crong", jung="jk"

let animals = ["rat", "tiger", "owl", "crocodile", "monkey", "rabbit"];
let [my_animal,,, your_animal] = animals; // 값 무시하기 -> my_animal = "rat", your_animal = "crocodile"





// 배열의 구조 분해 할당(선언과 동시에 초기화)
var [one, two, three] = foo;

// 객체의 구조 분해 할당
var sandwich={
  bread: "dutch crunch",
  meat: "tuna",
  cheese: "swiss",
  toppings: ["lettuce", "tomato", "mustard"]
};

var {bread, meat, toppings}=sandwich; //Destructuring Assignment


let {a, b, ...rest} = {a: 10, b: 20, c: 30, d: 40}
a; // 10 
b; // 20 
rest; // { c: 30, d: 40 }




▶ 구조 분해 할당으로 JSON 객체 다루기
let news = [
    {
        "title" : "sbs",
        "imgurl" : "https://newsstand.naver.com/?list=&pcode=055",
        "newslist" : [
            "코로나 의료 물품, 우리나라는 얼마나 준비 돼 있나?",
            "재택근무·유급휴가? 중소 콜센터 직원에겐 꿈 같은 일",
            "마스크 공장으로 간 주민들…하루 생산량 3배 늘었다",
            "파리 팬들, 경기장 밖 집단 응원…무색해진 무관중"
        ]
    },
    {
        "title" : "mbc",
        "imgurl" : "https://newsstand.naver.com/?list=&pcode=214",
	"newslist" : [
	    "뉴욕증시 개장 직후 7%대 폭락…사흘만에 또 일시 거래중지",
	    "[바로간다] 돈뭉치 보여주니…뒷좌석에 마스크 2천 장",
	    "예배 자제 호소했지만…2차 감염 잇따라",
	    "문 잠그는 지구촌…경제도 줄줄이 도미노"
	]
    }
];


let [,mbc] = news;
let {title, imgurl} = mbc;
console.log(title, imgurl);

let [, {title, imgurl}] = news; //이렇게 간략하게 가능!
console.log(title, imgurl);


let travel = {
    destination: 'Republic of Korea',
    foodsInfo: { 
        dish: [
            {name: '비빔밥', region: '종로', price: 8000},
            {name: '불고기', region: '압구정', price: 10000},
            {name: '밀면', region: '부산 서면', price: 7000},
            {name: '왕갈비', region: '수원', price: 12000},
        ],
        dessert: [
            {name: '녹차 푸라푸치노', store: '스타벅스', price: 6900},
            {name: '레인보우 샤베트', store: '베스킨라빈스', price: 3900},
            {name: '더치 커피', store: '바나프레소', price: 2000},
            {name: '아이스 허니버터 아몬드', store: '베스킨라빈스', price: 3900},
            {name: '이상한 나라의 솜사탕', store: '베스킨라빈스', price: 3900},
        ],
    },
    cost: 560000,
};

let { foodsInfo: { dessert: [,, todayCoffee]}} = travel; 
console.log(todayCoffee); // todayCoffee = {name: '더치 커피', store: '바나프레소', price: 2000}

let { foodsInfo: { dessert: [,, {name:MENU}]}} = travel;
console.log(MENU); // MENU = "더치 커피"












▶ delete 연산자
객체, 객체의 속성 또는 배열의 특정한 위치에 있는 객체를 삭제합니다. 
문법은 다음과 같습니다

delete objectName;
delete objectName.property;
delete objectName[index];
delete property; // legal only within a with statement


▶ typeof 연산자
typeof 피연산자
typeof (피연산자)


▶ in 연산자
객체에 특정한 속성이 있는경우 true를 반환합니다.

// Arrays
var trees = ["redwood", "bay", "cedar", "oak", "maple"];
0 in trees;        // returns true
3 in trees;        // returns true
6 in trees;        // returns false
"bay" in trees;    // returns false (you must specify the index number,
                   // not the value at that index)
"length" in trees; // returns true (length is an Array property)


// Custom objects
var mycar = { make: "Honda", model: "Accord", year: 1998 };
"make" in mycar;  // returns true
"model" in mycar; // returns true




==================중요한 표현식==================
▶ this
현재 객체를 참조하는 데 this 키워드를 사용합니다. 
일반적으로, this는 메소드에서 호출하는 객체를 참조합니다. 
점(.)이나 괄호([])로 접근할 수 있습니다.

this["propertyName"]
this.propertyName

▶ 확산연산자(...)
함수 호출, 배열 리터럴, 객체 리터럴에서 사용 가능
다중인수(함수호출)또는 다중요소(문자배열)들이 예상되는 곳에서 확장될 수 있는 표현을 하게합니다.

var parts = ['shoulder', 'knees'];
var lyrics = ['head', ...parts, 'and', 'toes'];

var colors = ["Violet", "Indigo", "Blue", "Green", "Yellow", "Orange", "Red"];  
var [a,b,...args] = colors;

var arr1 = [0, 1, 2];
var arr2 = [3, 4, 5];
arr1 = [...arr2, ...arr1]; // arr1 은 이제 [3, 4, 5, 0, 1, 2] 가 됨



function fun(a, b, ...theArgs) {  
  // statements  
}
function show(a,...rest, b) {  
  // error  
};


function f(x, y, z) { }
var args = [0, 1, 2];
f(...args);


function myFunction(v, w, x, y, z) { }
var args = [0, 1];
myFunction(-1, ...args, 2, ...[3]);


var dateFields = [1970, 0, 1];  // 1 Jan 1970
var d = new Date(...dateFields);


function show(...args) {  
  let sum = 0;  
  for (let i of args) {  
      sum += i;  
  }  
  console.log("Sum = "+sum);  
} 
 
show(10, 20, 30);

let obj1={"name": "Jenny", "age":25 , "height": 166 };
let obj2={"name": "Honny", "likes": ["soccer", "games", "sing"]};

let newObj={
  ...obj1,
  ...obj2
};

newObj["name"] //Honny (뒤에 있는 것이 앞에 있는 것을 덮어쓴다)




==================배열==================
var arr = new Array(element0, element1, ..., elementN);
var arr = Array(element0, element1, ..., elementN);
var arr = [element0, element1, ..., elementN];

var emp = [];
emp[0] = 'Casey Jones';
emp[1] = 'Phil Lesh';
emp[2] = 'August West';

//배열의 길이
arr.length
arr["length"]

▶▶▶▶▶▶▶ 배열 객체의 메서드
1) concat() //Array.prototype.concat()
var myArray = new Array('1', '2', '3');
myArray = myArray.concat('a', 'b', 'c'); 

let arr1=new Array(1,2,3,4,5);
let arr2=Array(6,7,8);
let arr3=['a', 'b', 'c'];

arr1.concat(arr2);
arr1=arr1.concat(arr2);
arr1=arr1.concat(...arr3);



2) join(delimiter = ',') //Array.prototype.join()
var myArray = new Array('Wind', 'Rain', 'Fire');
var list = myArray.join(' - '); // list is "Wind - Rain - Fire"

let arr1=new Array("Korean Air", "Jin Air", "JEJU Air", "Air Seoul");
let str=arr1.join("HELLO"); // Korean AirHELLOJin AirHELLOJEJU AirHELLOAir Seoul



3) push() //Array.prototype.push()
var myArray = new Array('1', '2');
myArray.push('3'); // myArray is now ["1", "2", "3"]

4) pop() //Array.prototype.pop()
var myArray = new Array('1', '2', '3');
var last = myArray.pop(); 
// myArray is now ["1", "2"], last = "3"


5) shift() //Array.prototype.shift()
//메서드는 배열의 첫번째 요소를 제거하고 그 제거된 요소를 반환합니다.
var myArray = new Array('1', '2', '3');
var first = myArray.shift(); 
// myArray is now ["2", "3"], first is "1"

6) slice() //Array.prototype.slice()
var myArray = new Array('a', 'b', 'c', 'd', 'e');
myArray = myArray.slice(1, 4); // starts at index 1 and extracts all elements
                               	// until index 3, returning [ "b", "c", "d"]


7) sort() //Array.prototype.sort()
var myArray = new Array('Wind', 'Rain', 'Fire');
myArray.sort(); 
// sorts the array so that myArray = [ "Fire", "Rain", "Wind" ]


8) indexOf(searchElement, [, fromIndex])
var a = ['a', 'b', 'a', 'b', 'a'];
console.log(a.indexOf('b')); // logs 1
// Now try again, starting from after the last match
console.log(a.indexOf('b', 2)); // logs 3
console.log(a.indexOf('z')); // logs -1, because 'z' was not found

9) forEach(callback[, thisObject]) 
// 배열의 모든 요소에 대해 반복적으로 주어진 callback 함수를 실행합니다. 
var a = ['a', 'b', 'c'];
a.forEach(function(element) { console.log(element);} );

10) map(callback[, thisObject]) 
// 배열의 모든 요소에 대해 콜백함수를 실행하고 콜백함수의 실행결과를 새로운 배열에 담아 반환합니다.
var a1 = ['a', 'b', 'c'];
var a2 = a1.map(function(item) { return item.toUpperCase(); });
console.log(a2); // logs ['A', 'B', 'C']

11) filter(callback[, thisObject]) 
// 배열의 모든 요소에 대해 콜백 함수가 true를 반환하는 요소를 새로운 배열에 담아 반환 합니다. 
var a1 = ['a', 10, 'b', 20, 'c', 30];
var a2 = a1.filter(function(item) { return typeof item == 'number'; });
console.log(a2); // logs ['10', '20', '30']

12) every (callback [, thisObject])
// 콜백이 배열의 모든 항목에 대해 true를 반환하면 true를 반환합니다.
function isNumber(value){
  return typeof value == 'number';
}
var a1 = [1, 2, 3];
console.log(a1.every(isNumber)); // logs true
var a2 = [1, '2', 3];
console.log(a2.every(isNumber)); // logs false


13) some(callback[, thisObject])
// 배열의 모든 요소에 대해 콜백 함수를 실행하고 
하나의 요소라도 콜백 함수의 결과가 true이면 some()메서드의 결과는 true가 됩니다.
function isNumber(value){
  return typeof value == 'number';
}
var a1 = [1, 2, 3];
console.log(a1.some(isNumber)); // logs true
var a2 = [1, '2', 3];
console.log(a2.some(isNumber)); // logs true
var a3 = ['1', '2', '3'];
console.log(a3.some(isNumber)); // logs false



==================Map 객체==================
var sayings = new Map();
sayings.set("dog", "woof");
sayings.set("cat", "meow");
sayings.set("elephant", "toot");
sayings.size; // 3
sayings.get("fox"); // undefined
sayings.has("bird"); // false
sayings.delete("dog");

for (var [key, value] of sayings) {
  console.log(key + " goes " + value);
}
// "cat goes meow"
// "elephant goes toot"

==========================================
1) Object의 키는 Strings이며, Map의 키는 모든 값을 가질 수 있다.
2) Object는 크기를 수동으로 추적해야하지만, Map은 크기를 쉽게 얻을 수 있다.
3) Map은 삽입된 순서대로 반복된다.
4) 객체(Object)에는 prototype이 있어 Map에 기본 키들이 있다. 
(이것은 map = Object.create(null) 를 사용하여 우회할 수 있다. )
==========================================


▶▶▶▶▶▶▶ Map 객체의 메서드
1) Map.prototype.size
Map 객체에 들어있는 key/value pair의 수를 반환한다.

2) Map.prototype.clear()
Map 객체의 모든 key/value pair를 제거한다.

3) Map.prototype.delete(key)
주어진 키(Key)와 해당되는 값(Value)를 제거하고 제거하기 전에 Map.prototype.has(key)가 반환했던 값을 반환한다.

4) Map.prototype.entries()
Map 객체 안의 모든 요소들을 [key, value] 형태의 array 로 집어넣은 순서대로 가지고 있는 Iterator 객체를 반환

5) Map.prototype.get(key)
주어진 키(Key)에 해당되는 값(value)을 반환하고, 만약 없으면 undefined를 반환한다.

6) Map.prototype.has(key)
Map 객체 안에 주어진 key/value pair가 있는지 검사하고 Boolean 값을 반환한다.

7) Map.prototype.keys()
Map 객체 안의 모든 키(Key)들을 집어넣은 순서대로 가지고 있는 Iterator 객체를 반환한다.

8) Map.prototype.set(key, value)
Map 객체에 주어진 키(Key)에 값(Value)를 집어넣고, Map 객체를 반환한다.

9) Map.prototype.values()
Map 객체 안의 모든 값(Value)들을 집어넣은 순서대로 가지고 있는 Iterator 객체를 반환한다.


==================Set 객체==================
var mySet = new Set();
mySet.add(1);
mySet.add("some text");
mySet.add("foo");

mySet.has(1); // true
mySet.delete("foo");
mySet.size; // 2

for (let item of mySet) console.log(item);
// 1
// "some text"

▶ 배열과 Set의 상호 변환
Array.from 혹은 spread operator를 통해 Set객체를 가지고 Array을 생성할 수 있다. 
또한 Set 생성자는 배열을 인자로 받을 수 있고 해당 배열을 Set객체의 요소로 저장

Array.from(mySet);
[...mySet2];

mySet2 = new Set([1,2,3,4]);



▶▶▶▶▶▶▶ Set 객체의 메서드
1) Set.prototype.add(value)
Set 객체에 주어진 값을 갖는 새로운 요소를 추가합니다. Set 객체를 반환합니다.

2) Set.prototype.clear()
Set 객체에서 모든 요소를 제거합니다.

3) Set.prototype.delete(value)
value와 관련된 요소를 제거하고 Set.prototype.has(value)가 이전에 반환했던 값을 반환합니다.

4) Set.prototype.has(value)
Set 객체 내 주어진 값을 갖는 요소가 있는지를 주장하는(asserting, 나타내는) boolean을 반환합니다.

5) Set.prototype.values()
삽입 순으로 Set 객체 내 각 요소에 대한 값을 포함하는 새로운 Iterator 객체를 반환합니다.




=======================객체(Object)=======================
▶▶▶▶▶▶▶ 객체를 만드는 3가지 방법
object={property1:value1,property2:value2.....propertyN:valueN};
var objectname=new Object();
function emp(id,name,salary){  
this.id=id;  
this.name=name;  
this.salary=salary;  
}  
e=new emp(103,"Vimal Jaiswal",30000);




1) 프로퍼티에 접근할 때는 도트(점) 표기법
var myCar = new Object();
myCar.make = "Ford";
myCar.model = "Mustang";
myCar.year = 1969;


2) 대괄호 표기법을 사용하여 객체의 프로퍼티에 접근할 수 있다.
myCar["make"] = "Ford";
myCar["model"] = "Mustang";
myCar["year"] = 1969;

▶ 프로버티 접근
객체의 프로퍼티 이름은 유효한 자바스크립트 문자열이거나 문자열로 변환이 가능한 것이면 어떤 것이든 가능하며, 심지어 빈 문자열도 된다. 
하지만 자바스크립트 식별자(identifier)로 적합하지 않으면 (예 : 하이픈, 빈칸을 포함하거나 숫자로 시작하는 이름), 
대괄호를 이용한 표기법으로만 접근이 가능하다


◆◆ 모든 것이 객체 
자바스크립트 세상에서는 거의 모든 것들이 객체이다.
null 과 undefined 를 제외한 모든 원시 타입도 객체로 취급된다.
이러한 원시 타입들에도 프로퍼티가 추가될 수 있고 (설명 필요: assigned properties of some types are not persistent),
모두 객체로서의 특징을 갖는다.


var myHonda = {color: "red", wheels: 4, engine: {cylinders: 4, size: 2.2}};


// 생성자 함수1
function Person(name, age, sex) {
  this.name = name;
  this.age = age;
  this.sex = sex;
}

var rand = new Person("Rand McKinnon", 33, "M");
var ken = new Person("Ken Jones", 39, "M");

// 생성자 함수2
function Car(make, model, year, owner) {
  this.make = make;
  this.model = model;
  this.year = year;
  this.owner = owner;
}

var car1 = new Car("Eagle", "Talon TSi", 1993, rand);
var car2 = new Car("Nissan", "300ZX", 1992, ken);
console.log(car2.owner.name);


========================= Object Methods =========================
▶ 객체는 Object.create 메서드를 이용해서 생성될 수 있다.
// Animal properties and method encapsulation
var Animal = {
  type: "Invertebrates", // Default value of properties
  displayType : function(){  // Method which will display type of Animal
    console.log(this.type);
  }
}

// Create new animal type called animal1 
var animal1 = Object.create(Animal);
animal1.displayType(); // Output:Invertebrates


▶ Object.assign(target, sources) // sources에 지정한 객체들의 내용을 target에 복사하고 그 결과를 반환.

const object1 = {  
  a: 1,  
  b: 2,  
  c: 3  
};  
const object3= {  
  g: 1,  
  h: 2,  
  i: 3  
};    
  
const object2 = Object.assign({c: 4, d: 5}, object1); // object3 = {c: 3, d: 5, a: 1, b: 2}
const object4 = Object.assign({g: 34, h: 25}, object3); // object4 = {g: 1, h:2, i:3}



▶ Object.entries(obj) //객체의 [key, value] 쌍으로 이루어진 배열을 리턴

let obj = {10: 'arry', 21: 'barry', 23: 'carry'};
let arr = Object.entries(obj); //arr= [ ["10", "arry"], ["21", "barry"], ["23", "carry"] ]


▶ Object.keys(obj)
▶ Object.values(obj)



================== 클래스(Class) ==================
class Polygon {
  constructor(height, width) {
    this.area = height * width;
  }
}

console.log(new Polygon(4,3).area); // expected output: 12

▶ class 선언은 프로토타입 기반 상속을 사용하여, 주어진 이름의 새로운 클래스를 만듭니다.


class Polygon {
  constructor(height, width) {
    this.name = 'Polygon';
    this.height = height;
    this.width = width;
  }
}

class Square extends Polygon {
  constructor(length) {
    super(length, length);
    this.name = 'Square';
  }
}



class Polygon {
  constructor() {
    this.name = "Polygon";
  }
}

const poly1 = new Polygon();

console.log(poly1.name);
// expected output: "Polygon"


▶ 클래스는 constructor라는 이름을 가진 특별한 메서드를 하나씩만 가질 수 있습니다. 두 개 이상의 constructor 메서드는 SyntaxError를 유발합니다.
▶ 생성자 메서드는 super 키워드를 사용하여 상위 클래스의 생성자 메서드를 호출할 수 있습니다.
▶ 생성자 메서드를 지정하지 않은 경우엔 기본 생성자 메서드를 사용합니다.



class Square extends Polygon {
  constructor(length) {
    // length로 다각형의 넓이와 높이를 정의하기 위해 부모클래스의 생성자를 호출합니다.
    super(length, length);
    // Note: 파생 클래스에서, 'this'를 사용하기 전에는 반드시 super()를
    // 호출하여야 합니다. 그렇지 않을 경우 참조에러가 발생합니다.
    this.name = 'Square';
  }

  getArea() {
    return this.height * this.width;
  }

  setArea(value) {
    this.area = value;
  } 
}



▶ 만약 생성자를 지정하지 않을 경우 기본 생성자 메서드를 사용합니다. 
기본 클래스(즉, 아무것도 상속하지 않는 클래스)의 기본 생성자 메서드는 다음과 같습니다.
constructor() {}

파생 클래스의 경우, 기본 생성자는 다음과 같습니다.
constructor(...args) {
  super(...args);
}



▶ static 키워드는 클래스의 정적 메서드를 정의합니다.
▶ 정적 메서드는 클래스의 인스턴스 없이 호출이 가능하며 클래스가 인스턴스화되면 호출할 수 없다. 
▶ 정적 메서드는 종종 어플리케이션의 유틸리티 함수를 만드는데 사용된다.
class ClassWithStaticMethod {
  static staticMethod() {
    return 'static method has been called.';
  }
}

console.log(ClassWithStaticMethod.staticMethod());
// expected output: "static method has been called."



▶ 다른 정적 메서드에서의 호출
(동일한 클래스 내의 다른 정적 메서드 내에서 정적 메서드를 호출하는 경우 키워드 this를 사용할 수 있다.)

class StaticMethodCall {
  static staticMethod() {
    return 'Static method has been called';
  }
  static anotherStaticMethod() {
    return this.staticMethod() + ' from another static method';
  }
}
StaticMethodCall.staticMethod(); 
// 'Static method has been called'

StaticMethodCall.anotherStaticMethod(); 
// 'Static method has been called from another static method'


=================================================
정적 메서드가 비정적 메서드에서 키워드this 를 써서는 직접적인 접근을 할 수 없다. 
바른 호출 방법은  클래스 명칭을 쓰거나, 
즉 CLASSNAME.STATIC_METHOD_NAME() 을 이용하거나 
혹은 그 메서드를 생성자의 한 속성으로 부르는 것으로, 
즉 constructor : this.constructor.STATIC_METHOD_NAME()를 이용한다.
=================================================

class StaticMethodCall {
  constructor() {
    console.log(StaticMethodCall.staticMethod()); 
    // 'static method has been called.' 

    console.log(this.constructor.staticMethod()); 
    // 'static method has been called.' 
  }

  static staticMethod() {
    return 'static method has been called.';
  }
}






class Triple {
  static triple(n) {
    n = n || 1; //비트연산이 아니어야 합니다.
    return n * 3;
  }
}

class BiggerTriple extends Triple {
  static triple(n) {
    return super.triple(n) * super.triple(n);
  }
}

console.log(Triple.triple());        // 3
console.log(Triple.triple(6));       // 18
console.log(BiggerTriple.triple(3)); // 81
var tp = new Triple();
console.log(BiggerTriple.triple(3)); // 81 (부모의 인스턴스에 영향을 받지 않습니다.)
console.log(tp.triple()); // 'tp.triple은 함수가 아닙니다.'.
console.log(tp.constructor.triple(4)); // 12


========================= async/await =========================
프로미스에 대한 설명 https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise

async function 선언은 AsyncFunction 객체를 반환하는 하나의 비동기 함수를 정의한다.
비동기 함수는 이벤트 루프를 통해 비동기적으로 작동하는 함수로, 암시적으로 Promise를 사용하여 결과를 반환한다.

// Syntax
async function name([param[, param[, ... param]]]) { 
    statements
}

name = 함수의 이름
param = 함수에게 전달되기 위한 인자의 이름
statements 함수 내용

반환 값 = Promise : async함수에 의해 반환 된 값으로 해결되거나 async함수 내에서 발생하는 캐치되지 않는 예외로 거부되는 값.
--------------------------------------------------------
async 함수에는 await식이 포함될 수 있습니다. 
이 식은 async 함수의 실행을 일시 중지하고 전달 된 Promise의 해결을 기다린 다음 async 함수의 실행을 다시 시작하고 완료후 값을 반환합니다.

await 키워드는 async 함수에서만 유효하다는 것을 기억하십시오.
--------------------------------------------------------


